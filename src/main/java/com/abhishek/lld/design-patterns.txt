Design Patterns : 

Design patterns are typical solutions to common problems in software design, 
each pattern is like a blueprint that you can customize to solve a particular
design problem in your code

Benefits of patterns : 
Patterns are a toolkit of solutions to common problems in software design, 
They definea common language that helps your team communicate more efficiently

Classification : 
Design patterns differ by their complexity, level of detail and scale of 
applicability. In addition, they can be categorized by their intent and 
divided into three groups

Why should I learn patterns?
The truth is that you might manage to work as a programmer for many years 
without knowing about a single pattern. A lot of people do just that even 
in that case, though, you might be implementing some patterns without even 
knowing it so why would you spend time learning them?

Design patterns are a toolkit of tried and tested solutions to common problems 
in software design. Even if you never encounter these problems, knowing patterns
is still useful because it teaches you how to solve all sorts of problems using 
principles of object-oriented design

Design patterns define a common language that you and your teammates can use to 
communicate more efficiently. You can say, “Oh, just use a Singleton for that,”
and everyone will understand the idea behind your suggestion. No need to explain 
what a singleton is if you know the pattern and its name

Classification of patterns : 
Design patterns differ by their complexity, level of detail and scale of applicability 
to the entire system being designed. I like the analogy to road construction: you can 
make an intersection safer by either installing some traffic lights or building an 
entire multi-level interchange with underground passages for pedestrians.

The most basic and low-level patterns are often called idioms, 
They usually apply only to a single programming language

The most universal and high-level patterns are architectural patterns 
Developers can implement these patterns in virtually any language unlike 
other patterns, they can be used to design the architecture of an entire 
application

In addition, all patterns can be categorized by their intent, 
or purpose this book covers three main groups of patterns:

Creational patterns : 
Creational patterns provide object creation mechanisms 
that increase flexibility and reuse of existing code
These patterns provide various object creation mechanisms, 
which increase flexibility and reuse of existing code

Types of Creational patterns : 
Singleton 
Factory Method
Abstract Factory
Builder
Prototype

Structural patterns : 
Structural patterns explain how to assemble objects and 
classes into larger structures, while keeping these structures 
flexible and efficient, These patterns explain how to assemble 
objects and classes into larger structures while keeping these 
structures flexible and efficient

Types of Structural patterns : 
Adapter
Bridge
Composite
Decorator
Facade
Flyweight
Proxy

Behavioral patterns : 
Behavioral patterns take care of effective communication 
and the assignment of responsibilities between objects
These patterns are concerned with algorithms and the 
assignment of responsibilities between objects

Types of Behavioral patterns : 
Chain of Responsibilty
Command
Iterator
Mediator
Memento
Observer
State
Strategy
Template Method
Visitor
