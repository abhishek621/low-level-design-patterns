Proxy :

Proxy is a structural design pattern that lets you provide a substitute or 
placeholder for another object. A proxy controls access to the original object, 
allowing you to perform something either before or after the request gets through 
to the original object

The Proxy pattern is a structural design pattern that provides a surrogate or 
placeholder for another object to control access to it. The Proxy pattern can 
be used to add an additional layer of control or functionality to the object 
without changing its code. There are different types of proxies, such as 
virtual proxies, protection proxies, and remote proxies

Key Concepts of Proxy Pattern : 

Subject: The common interface for RealSubject and Proxy

RealSubject: The actual object that the proxy represents

Proxy: The surrogate object that controls access to the RealSubject

Use Cases of Proxy Pattern : 

Virtual Proxy: To control access to resource-intensive objects that are created on demand

Protection Proxy: To control access to objects based on access rights

Remote Proxy: To control access to remote objects

Caching Proxy: To control access to objects that can be cached for better performance

Problem : 
Why would you want to control access to an object? Here is an example: you have 
a massive object that consumes a vast amount of system resources. You need it 
from time to time, but not always

Problem solved by Proxy pattern
Database queries can be really slow.
You could implement lazy initialization: create this object only when it’s 
actually needed. All of the object’s clients would need to execute some deferred 
initialization code. Unfortunately, this would probably cause a lot of code duplication
In an ideal world, we’d want to put this code directly into our object’s class, but 
that isn’t always possible. For instance, the class may be part of a closed 3rd-party 
library

Solution : 
The Proxy pattern suggests that you create a new proxy class with the same interface 
as an original service object. Then you update your app so that it passes the proxy 
object to all of the original object’s clients. Upon receiving a request from a client, 
the proxy creates a real service object and delegates all the work to it

Solution with the Proxy pattern
The proxy disguises itself as a database object. It can handle lazy initialization 
and result caching without the client or the real database object even knowing but 
what’s the benefit? If you need to execute something either before or after the primary 
logic of the class, the proxy lets you do this without changing that class. Since the 
proxy implements the same interface as the original class, it can be passed to any 
client that expects a real service object

Conclusion : 
The Proxy pattern allows you to control access to objects, adding an additional layer 
of functionality or control. In this example, we demonstrated how to use the Proxy 
pattern to manage access to image objects, including lazy loading, logging access, 
and implementing protection based on user roles. By using the Proxy pattern, we can 
enhance the flexibility and maintainability of our code, providing a more controlled 
and efficient way to interact with complex or resource-intensive objects
