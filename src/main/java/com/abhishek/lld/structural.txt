Structural patterns : 

Structural patterns explain how to assemble objects and 
classes into larger structures, while keeping these structures 
flexible and efficient, These patterns explain how to assemble 
objects and classes into larger structures while keeping these 
structures flexible and efficient

Types of Structural patterns : 
Adapter
Bridge
Composite
Decorator
Facade
Flyweight
Proxy

Adapter : 
Also known as Wrapper, Adapter is a structural design pattern 
that allows objects with incompatible interfaces to collaborate

Bridge : 
Bridge is a structural design pattern that lets you split a large 
class or a set of closely related classes into two separate hierarchies 
abstraction and implementation which can be developed independently of 
each other

Composite : 
Also known as Object Tree, Composite is a structural design pattern 
that lets you compose objects into tree structures and then work with 
these structures as if they were individual objects

Decorator : 
Also known as Wrapper, Decorator is a structural design pattern that 
lets you attach new behaviors to objects by placing these objects 
inside special wrapper objects that contain the behaviors

Facade : 
Facade is a structural design pattern that provides a simplified 
interface to a library, a framework, or any other complex set of 
classes

Flyweight : 
Also known as Cache, Flyweight is a structural design pattern that 
lets you fit more objects into the available amount of RAM by sharing 
common parts of state between multiple objects instead of keeping all 
of the data in each object

Proxy : 
Proxy is a structural design pattern that lets you provide a substitute 
or placeholder for another object. A proxy controls access to the original 
object allowing you to perform something either before or after the request 
gets through to the original object