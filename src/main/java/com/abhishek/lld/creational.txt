Creational patterns : 

Creational patterns provide object creation mechanisms 
that increase flexibility and reuse of existing code
These patterns provide various object creation mechanisms, 
which increase flexibility and reuse of existing code

Types of Creational patterns : 
Singleton 
Factory Method
Abstract Factory
Builder
Prototype

Singleton : 
Singleton is a creational design pattern that lets you ensure that 
a class has only one instance, while providing a global access point 
to this instance

Factory Method : 
Also known as Virtual Constructor, Factory Method is a creational design 
pattern that provides an interface for creating objects in a superclass, 
but allows subclasses to alter the type of objects that will be created
The Factory Method pattern suggests that you replace direct object 
construction calls (using the new operator) with calls to a special 
factory method

Abstract Factory : 
Abstract Factory is a creational design pattern that lets you 
produce families of related objects without specifying their 
concrete classes, The first thing the Abstract Factory pattern 
suggests is to explicitly declare interfaces for each distinct 
product of the product family then you can make all variants 
of products follow those interfaces


Builder : 
Builder is a creational design pattern that lets you construct 
complex objects step by step, the pattern allows you to produce 
different types and representations of an object using the same 
construction code, The Builder pattern suggests that you extract 
the object construction code out of its own class and move it to 
separate objects called builders

Prototype : 
Also known as Clone, Prototype is a creational design pattern that 
lets you copy existing objects without making your code dependent 
on their classes