Observer : 

Also known as Event-Subscriber, Listener, Observer is a behavioral design pattern 
that lets you define a subscription mechanism to notify multiple objects about any 
events that happen to the object they’re observing The Observer pattern suggests 
that you add a subscription mechanism to the publisher class so individual objects 
can subscribe to or unsubscribe from a stream of events coming from that publisher 
Fear not! Everything isn’t as complicated as it sounds. In reality, this mechanism 
consists of 
1) an array field for storing a list of references to subscriber objects and 
2) several public methods which allow adding subscribers to and removing them 
from that list

The Observer pattern is a behavioral design pattern where an object known 
as the subject maintains a list of its dependents (observers) and notifies 
them of any state changes, usually by calling one of their methods, This 
pattern is useful when you need to maintain consistency between related 
objects without making them tightly coupled

Key Concepts of Observer Pattern : 

Subject: 
Maintains a list of observers, provides methods to 
add/remove observers, and notifies them of state changes

Observer: 
Defines an interface for objects that should be notified of changes in the subject

Concrete Subject: 
Implements the subject interface and sends notifications to observers on state changes

Concrete Observer: 
Implements the observer interface to receive notifications from the subject

Use Cases of Observer Pattern : 
Event Handling : 
In GUI frameworks, where components need to react to changes in model data

Stock Market Updates : 
Where multiple stock market screens need to be updated when stock prices change

Temperature Monitoring : 
Where various displays need to show real-time temperature changes from a weather station

Traffic Monitoring Systems : 
Where traffic lights or control centers need to react to changes in traffic flow

Conclusion : 
The Observer pattern facilitates communication between objects in a loosely 
coupled manner. In this example, we demonstrated how to use the Observer pattern 
to implement weather station updates to multiple display devices. By applying the 
Observer pattern, we achieve flexibility and maintainability in handling state 
changes and notifications between objects
