Singleton pattern : 

The Singleton pattern is a design pattern used to ensure that a class has 
only one instance and provides a global point of access to that instance, 
This is useful when exactly one object is needed to coordinate actions 
across the system. The Singleton pattern is typically implemented by 
creating a class with a method that creates a new instance of the class 
if one does not exist, If one does exist, it simply returns a reference 
to that object

Key Concepts of Singleton Pattern : 

Private Constructor: The constructor is made private to prevent 
					 the instantiation of the class from outside
					 
Static Instance: A static member is used to hold the single instance of the class

Public Static Method: A public static method is used to provide 
					  the global point of access to the instance


Use Cases of Singleton Pattern : 
Configuration Settings: 
Singleton is often used for configuration settings 
where only one instance of configuration should exist

Logging: 
A logger utility class is typically implemented as a Singleton 
to ensure that all parts of the application use the same logging 
instance

Caching: 
Singleton pattern can be used for caching purposes where a single 
instance of cache can be accessed throughout the application

Thread Pooling: 
To manage a pool of threads, the Singleton pattern 
ensures there is only one thread pool manager

Database Connections: 
A database connection pool can be managed using the Singleton pattern 
to ensure that all parts of the application use the same connection pool

Problem : 
The Singleton pattern solves two problems at the same 
time, violating the Single Responsibility Principle:

(1) Ensure that a class has just a single instance :  
why would anyone want to control how many instances a class has? 
The most common reason for this is to control access to some shared 
resource for example a database or a file Here’s how it works: imagine 
that you created an object, but after a while decided to create a new 
one so instead of receiving a fresh object, you’ll get the one you already 
created note that this behavior is impossible to implement with a regular 
constructor since a constructor call must always return a new object by 
design

(2) Provide a global access point to that instance :  
Remember those global variables that you (all right, me) used to store some 
essential objects? While they’re very handy, they are also very unsafe since 
any code can potentially overwrite the contents of those variables and crash 
the app just like a global variable, the Singleton pattern lets you access 
some object from anywhere in the program. However, it also protects that 
instance from being overwritten by other code, There’s another side to this 
problem: you don’t want the code that solves problem #1 to be scattered all 
over your program. It’s much better to have it within one class, especially 
if the rest of your code already depends on it

Nowadays, the Singleton pattern has become so popular that people may call 
something a singleton even if it solves just one of the listed problems

Solution : 
All implementations of the Singleton have these two steps in common:
Make the default constructor private, to prevent other objects 
from using the new operator with the Singleton class

Create a static creation method that acts as a constructor under the 
hood, this method calls the private constructor to create an object 
and saves it in a static field, all following calls to this method 
return the cached object

If your code has access to the Singleton class, then it’s able to call 
the Singleton’s static method so whenever that method is called, the 
same object is always returned

Conclusion : 
The Singleton pattern is a straightforward yet powerful design pattern used 
to control the creation of objects and ensure a class has only one instance 
Properly implemented, it is thread-safe and efficient, making it a valuable 
tool in a developer's toolkit
					  
					  