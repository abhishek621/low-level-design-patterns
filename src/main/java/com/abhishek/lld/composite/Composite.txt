Composite :

Also known as Object Tree, Composite is a structural design pattern that lets you 
compose objects into tree structures and then work with these structures as if they 
were individual objects

The Composite pattern allows you to compose objects into tree structures to represent 
part-whole hierarchies. It lets clients treat individual objects and compositions of 
objects uniformly

Key Concepts of Composite Pattern : 

Component: 
An interface or abstract class for all objects in 
the composition, both the composite and leaf nodes

Leaf: 
A class representing a single object in the composition

Composite: 
A class representing a composite object, which can contain other composites or leaf nodes

Use Cases of Composite Pattern : 
File Systems: 
Representing files and directories where directories can contain files or other directories

Graphic Systems: 
Representing shapes where complex shapes can be composed of simpler shapes

Organization Structures: 
Representing departments and sub-departments within a company

UI Components: 
Representing components in a graphical user interface where 
containers can contain other components

Problem : 
Using the Composite pattern makes sense only when the core model of your app can 
be represented as a tree for example, imagine that you have two types of objects: 
Products and Boxes. A Box can contain several Products as well as a number of 
smaller Boxes. These little Boxes can also hold some Products or even smaller 
Boxes, and so on say you decide to create an ordering system that uses these 
classes. Orders could contain simple products without any wrapping, as well 
as boxes stuffed with products...and other boxes. How would you determine 
the total price of such an order?

You could try the direct approach: unwrap all the boxes, go over all the 
products and then calculate the total. That would be doable in the real 
world; but in a program, it’s not as simple as running a loop. You have 
to know the classes of Products and Boxes you’re going through, the nesting 
level of the boxes and other nasty details beforehand, All of this makes the 
direct approach either too awkward or even impossible

Solution : 
The Composite pattern suggests that you work with Products and Boxes through 
a common interface which declares a method for calculating the total price
How would this method work? For a product, it’d simply return the product’s 
price. For a box, it’d go over each item the box contains, ask its price and 
then return a total for this box. If one of these items were a smaller box, 
that box would also start going over its contents and so on, until the prices 
of all inner components were calculated. A box could even add some extra cost 
to the final price, such as packaging cost

Conclusion : 
The Composite pattern allows you to build complex hierarchical structures from simpler 
components while treating both the composite and individual objects uniformly. This 
pattern is highly useful in scenarios where part-whole hierarchies need to be represented, 
such as file systems, organizational structures, or UI components. By using the Composite 
pattern, you can create flexible and scalable code that can easily manage and operate on 
both individual objects and composite structures
